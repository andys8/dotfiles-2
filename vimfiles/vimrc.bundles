if &compatible
  set nocompatible
end

call plug#begin('~/.vim/bundle')

" Ruby/Rails
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-cucumber'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-endwise'
Plug 'stephpy/vim-yaml'
Plug 'tpope/vim-projectionist'
Plug 'janko-m/vim-test'

" Elm
Plug 'ElmCast/elm-vim'
Plug 'antew/vim-elm-analyse'

" Automatically create any non-existent directories before writing the buffer.
Plug 'pbrisbin/vim-mkdir'

Plug 'tpope/vim-abolish'
Plug 'tpope/vim-liquid'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-commentary'
Plug 'mileszs/ack.vim'
Plug 'christoomey/vim-system-copy'
Plug 'itchyny/lightline.vim'
Plug 'othree/html5.vim'
Plug 'kassio/neoterm'
Plug 'isRuslan/vim-es6'
Plug 'w0rp/ale'
" Javascript
Plug 'pangloss/vim-javascript'
Plug 'leshill/vim-json'
" Elixir
Plug 'awetzel/elixir.nvim', { 'do': 'yes \| ./install.sh' }
Plug 'elixir-lang/vim-elixir'
Plug 'mhinz/vim-mix-format'
Plug 'powerman/vim-plugin-AnsiEsc'

" Project navigation
Plug 'tpope/vim-vinegar'
Plug 'kien/ctrlp.vim'
Plug 'scrooloose/nerdtree'

" Themes
Plug 'rakr/vim-one'
Plug 'lifepillar/vim-solarized8'

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()

set background=dark
color one
" set background=light
" color solarized8_flat


let g:lightline = {
      \ 'colorscheme': 'seoul256',
      \ }

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
if isdirectory(argv(0))
    bd
    autocmd vimenter * exe "cd" argv(0)
    autocmd VimEnter * NERDTree
endif

let base16colorspace=256  " Access colors present in 256 colorspace

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn))|(tmp|node_modules|elm-stuff)$',
  \ 'file': '\v\.(exe|so|dll|map)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_use_caching = 1
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'

let g:ale_elm_lsp_use_global = 1
let g:ale_elm_analyse_use_global = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_sign_column_always = 0
let g:ale_linters = {
\  'javascript': ['eslint'],
\  'elixir': ['elixir-ls', 'credo'],
\  'elm': ['elm_lsp'],
\}
" Disable fixers for any file containing 'gems' in its path.
let g:ale_pattern_options_enabled = 1
let g:ale_pattern_options = {
\  'gems': { 'ale_enabled': 0 }
\}
let g:ale_fixers = {
\   'ruby': ['rubocop']
\}
let g:ale_elixir_elixir_ls_release = "/Users/cezar/Work/src/elixir-ls/rel"

let g:mix_format_on_save = 1
let g:mix_format_silent_errors = 1

let g:titlecase_map_keys = 0

au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

let g:haskellmode_completion_ghc = 1
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

let test#strategy = "neovim"

let g:elm_format_autosave = 1
let g:elm_setup_keybindings = 0
let g:elm_make_show_warnings = 0
" let g:elm_syntastic_show_warnings = 0

let g:vim_json_syntax_conceal = 0

let g:ack_default_options =
      \ " -s -H --nocolor --nogroup --column --smart-case --follow"
" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~ "iTerm"
  let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
  let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

let g:ragtag_global_maps = 1

let g:rails_projections = {
      \ "config/projections.json": {
      \   "command": "projections"
      \ }}

